{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,gBAC/BE,EAAOH,SAASC,cAAc,eAC9BG,EAASJ,SAASC,cAAc,iBAyBtC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTN,EACFI,EAAQ,CAACG,SAAAT,EAAUU,MAAAT,IAEpBM,EAAO,CAACE,SAAAT,EAAUU,MAAAT,MAElBA,MA/BHR,EAAKkB,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAMC,iBAENL,YAAW,WACT,IAAK,IAAIM,EAAI,EAAGA,EAAIhB,EAAOiB,MAAOD,GAAK,EAAG,CACxC,IAAME,GAAapB,EAAMmB,QAAUlB,EAAKkB,MAAQD,EAEhDf,EADWe,EAAI,EACSE,GACrBC,MAAK,SAAAC,G,IAAGC,EAAQD,EAART,SAAUW,EAAKF,EAALR,MACjBW,QAAQC,IAAI,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,QAC3D7B,EAAAiC,OAAOC,QAAQ,uBAAwCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,WAE7DM,OAAM,SAAAR,G,IAAGS,EAAQT,EAART,SAAUmB,EAAKV,EAALR,MAClBW,QAAQC,IAAI,sBAAuCC,OAAfI,EAAS,QAAYJ,OAANK,EAAM,QACzDrC,EAAAiC,OAAOK,QAAQ,sBAAqCN,OAAfI,EAAS,QAAYJ,OAANK,EAAM,cAG/DhC,EAAMmB,U","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst delay = document.querySelector('[name=delay]');\nconst step = document.querySelector('[name=step]');\nconst amount = document.querySelector('[name=amount]');\nlet position = 0;\n\nform.addEventListener('submit', SubmitForm);\n\nfunction SubmitForm(event) {\n  event.preventDefault();\n\n  setTimeout(() => {\n    for (let i = 0; i < amount.value; i += 1) {\n      const totalStep = +delay.value + + step.value * i;\n      position = i + 1;\n      createPromise(position, totalStep)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n         Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n          Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n        });\n     }\n  }, delay.value);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n  if (shouldResolve) {\n    resolve({position, delay});\n  } else {\n   reject({position, delay})\n  }\n}, delay)\n    });\n\n  }"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position3","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","delay","addEventListener","event","preventDefault","i","value","totalStep","then","param","position1","delay1","console","log","concat","Notify","success","catch","position2","delay2","failure"],"version":3,"file":"03-promises.dd6a5dd9.js.map"}